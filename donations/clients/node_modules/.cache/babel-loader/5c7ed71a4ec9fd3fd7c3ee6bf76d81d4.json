{"ast":null,"code":"var _jsxFileName = \"/Users/scottpittman/Desktop/website/donations/clients/src/components/CheckoutForm/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CardElement } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport './CheckoutForm.css';\nimport { stringify } from 'uuid';\nimport { token } from 'morgan';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CheckoutForm({\n  totalCost\n}) {\n  _s();\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(totalCost)\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const submit = async e => {\n    e.preventDefault();\n    const cardElement = elements.getElement(CardElement);\n    setStatus('submitting'); //         console.log(stripe)\n    //       const payload  = await stripe.createPaymentMethod({\n    //               type:\"card\",\n    //               card:cardElement,\n    //       });\n    //     //   if (payload.error) {\n    //     //     console.log(payload.error);\n    //     //   } else {\n    //     //     setPaymentMethod(payload.paymentMethod);\n    //     //   }\n    //     // }\n    //         await axios.post('/checkout',{\n    //         headers: {'Content-Type': \"text/plain\"},\n    //         token: token.id,\n    //         amount: totalCost * 100\n    //     }).then(res => {\n    //         if (res.ok) {\n    //           setStatus('complete');\n    //         } else{\n    //             return setStatus('error')\n    //         }\n    //     })\n    //     .catch(err => console.log(err.message))\n    //   if (status === 'complete') {\n    //     return <div className=\"CheckoutForm-complete\">Payment successful!</div>;\n    //   }\n    // }\n\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"CheckoutForm\",\n    onSubmit: submit,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Would you like to complete the purchase?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"CheckoutForm-button\",\n      type: \"submit\",\n      disabled: status === 'submitting',\n      children: status === 'submitting' ? 'Submitting' : 'Submit Order'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), status === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CheckoutForm-error\",\n      children: \"Something went wrong.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"ldxvBX7QZH5+6XNpO6E4nXjWQL0=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/scottpittman/Desktop/website/donations/clients/src/components/CheckoutForm/CheckoutForm.js"],"names":["React","useState","useEffect","CardElement","axios","useStripe","useElements","stringify","token","CheckoutForm","totalCost","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","window","fetch","method","headers","body","JSON","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","submit","e","preventDefault","cardElement","getElement","setStatus","payload","confirmCardPayment","payment_method","card","message","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CardElement} from \"@stripe/react-stripe-js\";\nimport axios from \"axios\"\nimport {\n    useStripe,\n    useElements\n  } from \"@stripe/react-stripe-js\"\nimport './CheckoutForm.css';\nimport { stringify } from 'uuid';\nimport { token } from 'morgan';\n\nfunction CheckoutForm({  totalCost }) {\n    const [succeeded, setSucceeded] = useState(false);\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState('');\n    const [disabled, setDisabled] = useState(true);\n    const [clientSecret, setClientSecret] = useState('');\n    const stripe = useStripe();\n    const elements = useElements();\n    useEffect(() => {\n        // Create PaymentIntent as soon as the page loads\n        window\n          .fetch(\"/create-payment-intent\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(totalCost)\n          })\n          .then(res => {\n            return res.json();\n          })\n          .then(data => {\n            setClientSecret(data.clientSecret);\n          });\n      }, []);\n      const cardStyle = {\n        style: {\n          base: {\n            color: \"#32325d\",\n            fontFamily: 'Arial, sans-serif',\n            fontSmoothing: \"antialiased\",\n            fontSize: \"16px\",\n            \"::placeholder\": {\n              color: \"#32325d\"\n            }\n          },\n          invalid: {\n            color: \"#fa755a\",\n            iconColor: \"#fa755a\"\n          }\n        }\n      };\n   const submit = async e => {\n    e.preventDefault();\n    const cardElement = elements.getElement(CardElement)\n    setStatus('submitting');\n\n    \n//         console.log(stripe)\n//       const payload  = await stripe.createPaymentMethod({\n        \n//               type:\"card\",\n//               card:cardElement,\n             \n//       });\n      \n\n//     //   if (payload.error) {\n//     //     console.log(payload.error);\n//     //   } else {\n//     //     setPaymentMethod(payload.paymentMethod);\n//     //   }\n//     // }\n  \n//         await axios.post('/checkout',{\n//         headers: {'Content-Type': \"text/plain\"},\n//         token: token.id,\n//         amount: totalCost * 100\n//     }).then(res => {\n//         if (res.ok) {\n//           setStatus('complete');\n//         } else{\n//             return setStatus('error')\n//         }\n        \n\n//     })\n//     .catch(err => console.log(err.message))\n\n     \n  \n\n//   if (status === 'complete') {\n//     return <div className=\"CheckoutForm-complete\">Payment successful!</div>;\n//   }\n// }\nconst payload = await stripe.confirmCardPayment(clientSecret, {\n    payment_method: {\n      card: elements.getElement(CardElement)\n    }\n  });\n  if (payload.error) {\n    setError(`Payment failed ${payload.error.message}`);\n    setProcessing(false);\n  } else {\n    setError(null);\n    setProcessing(false);\n    setSucceeded(true);\n  }\n};\n\n  return (\n    <form className=\"CheckoutForm\" onSubmit={submit}>\n      <h4>Would you like to complete the purchase?</h4>\n      <CardElement id=\"card-element\"/>\n      <button\n        className=\"CheckoutForm-button\"\n        type=\"submit\"\n        disabled={status === 'submitting'}\n      >\n        {status === 'submitting' ? 'Submitting' : 'Submit Order'}\n      </button>\n      {status === 'error' && (\n        <div className=\"CheckoutForm-error\">Something went wrong.</div>\n      )}\n    </form>\n  );\n}\n\n\nexport default CheckoutForm"]},"metadata":{},"sourceType":"module"}