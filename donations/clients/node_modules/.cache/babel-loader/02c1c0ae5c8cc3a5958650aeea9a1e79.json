{"ast":null,"code":"var _jsxFileName = \"/Users/scottpittman/Desktop/website/donations/clients/src/components/CheckoutForm/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { CardElement } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport './CheckoutForm.css';\nimport { stringify } from 'uuid';\nimport { token } from 'morgan';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CheckoutForm(totalCost) {\n  _s();\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const stripe = useStripe();\n  const elements = useElements();\n  console.log(totalCost);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const submit = async e => {\n    e.preventDefault();\n    const {\n      error: backendError,\n      clientSecret\n    } = await fetch(\"/create-payment-intent\", {\n      method: \"Post\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        currency: \"usd\"\n      })\n    }).then(res => {\n      return res.json();\n    });\n    console.log(clientSecret);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: submit,\n    children: [/*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-error\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: succeeded ? \"result-message\" : \"result-message hidden\",\n      children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://dashboard.stripe.com/test/payments`,\n        children: [\" \", \"Stripe dashboard.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), \" Refresh the page to pay again.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"zohM6oPvESYLpMKPPL/HgbzbesU=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm; //         console.log(stripe)\n//       const payload  = await stripe.createPaymentMethod({\n//               type:\"card\",\n//               card:cardElement,\n//       });\n//     //   if (payload.error) {\n//     //     console.log(payload.error);\n//     //   } else {\n//     //     setPaymentMethod(payload.paymentMethod);\n//     //   }\n//     // }\n//         await axios.post('/checkout',{\n//         headers: {'Content-Type': \"text/plain\"},\n//         token: token.id,\n//         amount: totalCost * 100\n//     }).then(res => {\n//         if (res.ok) {\n//           setStatus('complete');\n//         } else{\n//             return setStatus('error')\n//         }\n//     })\n//     .catch(err => console.log(err.message))\n//   if (status === 'complete') {\n//     return <div className=\"CheckoutForm-complete\">Payment successful!</div>;\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/scottpittman/Desktop/website/donations/clients/src/components/CheckoutForm/CheckoutForm.js"],"names":["React","useState","useEffect","CardElement","axios","useStripe","useElements","stringify","token","CheckoutForm","totalCost","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","stripe","elements","console","log","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","submit","e","preventDefault","backendError","clientSecret","fetch","method","headers","body","JSON","currency","then","res","json","payload","confirmCardPayment","payment_method","card","getElement"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { CardElement} from \"@stripe/react-stripe-js\";\nimport axios from \"axios\"\nimport {\n    useStripe,\n    useElements\n  } from \"@stripe/react-stripe-js\"\nimport './CheckoutForm.css';\nimport { stringify } from 'uuid';\nimport { token } from 'morgan';\n\nfunction CheckoutForm(  totalCost ) {\n    const [succeeded, setSucceeded] = useState(false);\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState('');\n    const [disabled, setDisabled] = useState(true);\n    const stripe = useStripe();\n    const elements = useElements();\n    console.log(totalCost)\n    \n       \n\n       \n       \n    \n    \n    \n    const cardStyle = {\n        style: {\n            base: {\n                color: \"#32325d\",\n                fontFamily: 'Arial, sans-serif',\n                fontSmoothing: \"antialiased\",\n                fontSize: \"16px\",\n                \"::placeholder\": {\n                    color: \"#32325d\"\n                }\n            },\n            invalid: {\n                color: \"#fa755a\",\n                iconColor: \"#fa755a\"\n            }\n        }\n    };\n    const handleChange = async (event) => {\n        // Listen for changes in the CardElement\n        // and display any errors as the customer types their card details\n        setDisabled(event.empty);\n        setError(event.error ? event.error.message : \"\");\n    };\n    const submit = async e => {\n        e.preventDefault();\n        const {error: backendError, clientSecret} = await fetch(\"/create-payment-intent\", {\n                method: \"Post\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    currency:\"usd\"\n                })\n              })\n              .then(res => {\n                return res.json();\n              });\n        console.log(clientSecret)\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n    payment_method: {\n        card: elements.getElement(CardElement)\n    }\n});\nif (payload.error) {\n    setError(`Payment failed ${payload.error.message}`);\n    setProcessing(false);\n} else {\n    setError(null);\n    setProcessing(false);\n    setSucceeded(true);\n}\n};\n\nreturn (\n    <form id=\"payment-form\" onSubmit={submit}>\n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange}  />\n      <button\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n        >\n        <span id=\"button-text\">\n          {processing ? (\n              <div className=\"spinner\" id=\"spinner\"></div>\n              ) : (\n                  \"Pay now\"\n                  )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n          <div className=\"card-error\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n        Payment succeeded, see the result in your\n        <a\n          href={`https://dashboard.stripe.com/test/payments`}\n          >\n          {\" \"}\n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p>\n    </form>\n  );\n}\n\n\nexport default CheckoutForm\n//         console.log(stripe)\n//       const payload  = await stripe.createPaymentMethod({\n        \n//               type:\"card\",\n//               card:cardElement,\n             \n//       });\n      \n\n//     //   if (payload.error) {\n//     //     console.log(payload.error);\n//     //   } else {\n//     //     setPaymentMethod(payload.paymentMethod);\n//     //   }\n//     // }\n  \n//         await axios.post('/checkout',{\n//         headers: {'Content-Type': \"text/plain\"},\n//         token: token.id,\n//         amount: totalCost * 100\n//     }).then(res => {\n//         if (res.ok) {\n//           setStatus('complete');\n//         } else{\n//             return setStatus('error')\n//         }\n        \n\n//     })\n//     .catch(err => console.log(err.message))\n\n     \n  \n\n//   if (status === 'complete') {\n//     return <div className=\"CheckoutForm-complete\">Payment successful!</div>;\n//   }\n// }"]},"metadata":{},"sourceType":"module"}