{"ast":null,"code":"var _jsxFileName = \"/Users/scottpittman/Desktop/website/donations/clients/src/components/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CheckoutForm({\n  selectedProduct,\n  stripe,\n  history\n}) {\n  _s();\n\n  if (selectedProduct === null) history.push('/');\n  const [receiptUrl, setReceiptUrl] = useState('');\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripes = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          id: selectedProduct.id\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Roboto, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const {\n      token\n    } = await stripe.createToken();\n    setReceiptUrl(order.data.charge.receipt_url);\n    const payload = await stripes.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  if (receiptUrl) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Payment Successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: receiptUrl,\n        children: \"View Receipt\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Amount: $\", selectedProduct.price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\",\n      options: cardStyle,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: processing || disabled || succeeded,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-error\",\n      role: \"alert\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: succeeded ? \"result-message\" : \"result-message hidden\",\n      children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `https://dashboard.stripe.com/test/payments`,\n        children: [\" \", \"Stripe dashboard.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), \" Refresh the page to pay again.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"Q9O+xJ2sUZdpwNNgnoNJyIe+Myw=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/scottpittman/Desktop/website/donations/clients/src/components/Form.js"],"names":["React","useState","useEffect","Link","CardElement","useStripe","useElements","axios","CheckoutForm","selectedProduct","stripe","history","push","receiptUrl","setReceiptUrl","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripes","elements","window","fetch","method","headers","body","JSON","stringify","items","id","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","token","createToken","order","charge","receipt_url","payload","confirmCardPayment","payment_method","card","getElement","price"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {Link} from \"react-router-dom\"\nimport {\n  CardElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\nimport axios from \"axios\"\n\nexport default function CheckoutForm({selectedProduct, stripe, history}) {\n    if(selectedProduct === null) history.push('/')\n    const [receiptUrl, setReceiptUrl ] = useState('')\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripes = useStripe();\n  const elements = useElements();\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window\n      .fetch(\"/create-payment-intent\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({items: [{ id: selectedProduct.id }]})\n      })\n      .then(res => {\n        return res.json();\n      })\n      .then(data => {\n        setClientSecret(data.clientSecret);\n      });\n  }, []);\n\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Roboto, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async (event) => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const {token} = await stripe.createToken()\n    \n    setReceiptUrl(order.data.charge.receipt_url)\n\n    const payload = await stripes.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n  if (receiptUrl) {\n    return (\n      <div className=\"success\">\n        <h2>Payment Successful!</h2>\n        <a href={receiptUrl}>View Receipt</a>\n        <Link to=\"/\">Home</Link>\n      </div>\n    )\n  }\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n        <p>Amount: ${selectedProduct.price}</p>\n      <CardElement id=\"card-element\" options={cardStyle} onChange={handleChange} />\n      <button\n        disabled={processing || disabled || succeeded}\n        id=\"submit\"\n      >\n        <span id=\"button-text\">\n          {processing ? (\n            <div className=\"spinner\" id=\"spinner\"></div>\n          ) : (\n            \"Pay now\"\n          )}\n        </span>\n      </button>\n      {/* Show any error that happens when processing the payment */}\n      {error && (\n        <div className=\"card-error\" role=\"alert\">\n          {error}\n        </div>\n      )}\n      {/* Show a success message upon completion */}\n      <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n        Payment succeeded, see the result in your\n        <a\n          href={`https://dashboard.stripe.com/test/payments`}\n        >\n          {\" \"}\n          Stripe dashboard.\n        </a> Refresh the page to pay again.\n      </p>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}