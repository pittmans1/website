{"ast":null,"code":"var _jsxFileName = \"/Users/scottpittman/Desktop/website/donations/clients/src/components/CheckoutForm/CheckoutForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { CardElement } from \"@stripe/react-stripe-js\";\nimport axios from \"axios\";\nimport { useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport './CheckoutForm.css';\nimport { stringify } from 'uuid';\nimport { token } from 'morgan';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CheckoutForm({\n  totalCost\n}) {\n  _s();\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(totalCost)\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const submit = async e => {\n    e.preventDefault();\n    const cardElement = elements.getElement(CardElement);\n    setStatus('submitting');\n    console.log(stripe);\n    const payload = await stripe.createPaymentMethod({\n      type: \"card\",\n      card: cardElement\n    }); //   if (payload.error) {\n    //     console.log(payload.error);\n    //   } else {\n    //     setPaymentMethod(payload.paymentMethod);\n    //   }\n    // }\n\n    await axios.post('/checkout', {\n      headers: {\n        'Content-Type': \"text/plain\"\n      },\n      token: token.id,\n      amount: totalCost * 100\n    }).then(res => {\n      if (res.ok) {\n        setStatus('complete');\n      } else {\n        return setStatus('error');\n      }\n    }).catch(err => console.log(err.message));\n\n    if (status === 'complete') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"CheckoutForm-complete\",\n        children: \"Payment successful!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 12\n      }, this);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"CheckoutForm\",\n    onSubmit: submit,\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Would you like to complete the purchase?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardElement, {\n      id: \"card-element\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"CheckoutForm-button\",\n      type: \"submit\",\n      disabled: status === 'submitting',\n      children: status === 'submitting' ? 'Submitting' : 'Submit Order'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), status === 'error' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CheckoutForm-error\",\n      children: \"Something went wrong.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutForm, \"ldxvBX7QZH5+6XNpO6E4nXjWQL0=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\nexport default CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/scottpittman/Desktop/website/donations/clients/src/components/CheckoutForm/CheckoutForm.js"],"names":["React","useState","CardElement","axios","useStripe","useElements","stringify","token","CheckoutForm","totalCost","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","useEffect","window","fetch","method","headers","body","JSON","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","submit","e","preventDefault","cardElement","getElement","setStatus","console","log","payload","createPaymentMethod","type","card","post","id","amount","ok","catch","err","message","status"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { CardElement} from \"@stripe/react-stripe-js\";\nimport axios from \"axios\"\nimport {\n    useStripe,\n    useElements\n  } from \"@stripe/react-stripe-js\"\nimport './CheckoutForm.css';\nimport { stringify } from 'uuid';\nimport { token } from 'morgan';\n\nfunction CheckoutForm({  totalCost }) {\n    const [succeeded, setSucceeded] = useState(false);\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState('');\n    const [disabled, setDisabled] = useState(true);\n    const [clientSecret, setClientSecret] = useState('');\n    const stripe = useStripe();\n    const elements = useElements();\n    useEffect(() => {\n        // Create PaymentIntent as soon as the page loads\n        window\n          .fetch(\"/create-payment-intent\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(totalCost)\n          })\n          .then(res => {\n            return res.json();\n          })\n          .then(data => {\n            setClientSecret(data.clientSecret);\n          });\n      }, []);\n      const cardStyle = {\n        style: {\n          base: {\n            color: \"#32325d\",\n            fontFamily: 'Arial, sans-serif',\n            fontSmoothing: \"antialiased\",\n            fontSize: \"16px\",\n            \"::placeholder\": {\n              color: \"#32325d\"\n            }\n          },\n          invalid: {\n            color: \"#fa755a\",\n            iconColor: \"#fa755a\"\n          }\n        }\n      };\n  const submit = async e => {\n    e.preventDefault();\n    const cardElement = elements.getElement(CardElement)\n    setStatus('submitting');\n\n    \n        console.log(stripe)\n      const payload  = await stripe.createPaymentMethod({\n        \n              type:\"card\",\n              card:cardElement,\n             \n      });\n      \n\n    //   if (payload.error) {\n    //     console.log(payload.error);\n    //   } else {\n    //     setPaymentMethod(payload.paymentMethod);\n    //   }\n    // }\n  \n        await axios.post('/checkout',{\n        headers: {'Content-Type': \"text/plain\"},\n        token: token.id,\n        amount: totalCost * 100\n    }).then(res => {\n        if (res.ok) {\n          setStatus('complete');\n        } else{\n            return setStatus('error')\n        }\n        \n\n    })\n    .catch(err => console.log(err.message))\n\n     \n  \n\n  if (status === 'complete') {\n    return <div className=\"CheckoutForm-complete\">Payment successful!</div>;\n  }\n}\n\n  return (\n    <form className=\"CheckoutForm\" onSubmit={submit}>\n      <h4>Would you like to complete the purchase?</h4>\n      <CardElement id=\"card-element\"/>\n      <button\n        className=\"CheckoutForm-button\"\n        type=\"submit\"\n        disabled={status === 'submitting'}\n      >\n        {status === 'submitting' ? 'Submitting' : 'Submit Order'}\n      </button>\n      {status === 'error' && (\n        <div className=\"CheckoutForm-error\">Something went wrong.</div>\n      )}\n    </form>\n  );\n}\n\n\nexport default CheckoutForm"]},"metadata":{},"sourceType":"module"}